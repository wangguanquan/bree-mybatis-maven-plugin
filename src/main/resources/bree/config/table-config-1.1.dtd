<?xml version="1.0" encoding="UTF-8" ?>
  <!--
  table 下包含多个 column resultMap sql insert update delete select 相应说明见定义
  namespace    命名空间
  name         the table name
  remark      说明
  sequence     oracle使用
  physicalName 物理表名,分库分表使用
  -->
  <!ELEMENT table (resultMap* | sql* | insert* | update* | delete* | select*)+>
  <!ATTLIST table
    name CDATA #IMPLIED
    sequence CDATA #IMPLIED
    physicalName CDATA #IMPLIED
    remark CDATA #IMPLIED
    >

  <!ELEMENT id EMPTY>
  <!ATTLIST id
    property CDATA #IMPLIED
    javaType CDATA #IMPLIED
    column CDATA #IMPLIED
    jdbcType CDATA #IMPLIED
    typeHandler CDATA #IMPLIED
    >
  <!--
  column 字段定义,定义字段对应javaType
  name          数据中字段名
  javaType      对应转为那种javaType
  -->
  <!ELEMENT result EMPTY>
  <!ATTLIST result
    property CDATA #IMPLIED
    javaType CDATA #IMPLIED
    column CDATA #IMPLIED
    jdbcType CDATA #IMPLIED
    typeHandler CDATA #IMPLIED
    remark CDATA #IMPLIED
    >

  <!--
   自定义resultMap 会生成 customer/${type}.java
   name        提供给operation 使用
   type        自定义映射名
   -->
  <!ELEMENT resultMap (id*,result*,association*,collection*)>
  <!ATTLIST resultMap
    id CDATA #REQUIRED
    type CDATA #REQUIRED
    remark CDATA #IMPLIED
    >
  <!--
  最定义操作, 根据这里生成对应的 操作
  name          name
  paging        分页设置  - 暂时没想好怎么扩展 -后续加上(思路,如果设置paging 则自动添加分页参数 不需要自己写limit 只需要写查询条件即可)
  paramType     参数类型: object 会自动翻译为 生成的对象,primitive 根据字段类型生成, map 使用Map<String, Object>使用参数
  multiplicity  one 返回对象,many 返回list, paging 返回分页
  resultType    指定返回类型(Map)
  resultMap     指定使用哪个resultMap 不写则使用自动生成的resultMap
  timeout       设置超时时间
  noCount       不生成count语句
  auto           - 暂时没想好怎么用,设想新增字段时自动修复
  -->
  <!ELEMENT select (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST select
    id CDATA #REQUIRED
    vo CDATA #IMPLIED
    paramType (object|primitive|map) #IMPLIED
    multiplicity (one|many|paging) #IMPLIED
    remark CDATA #IMPLIED
    resultType CDATA #IMPLIED
    resultMap CDATA #IMPLIED
    timeout CDATA #IMPLIED
    noCount (true|false) #IMPLIED
    resultSetType (FORWARD_ONLY | SCROLL_INSENSITIVE | SCROLL_SENSITIVE | DEFAULT) #IMPLIED
    statementType (STATEMENT|PREPARED|CALLABLE) #IMPLIED
    fetchSize CDATA #IMPLIED
    flushCache (true|false) #IMPLIED
    useCache (true|false) #IMPLIED
    >

  <!--
    parameterMap 已被官方废弃
    parameterType 本插件也支持，统一使用内联参数映射
    paramType 插件新增类型，选择object时参数将以实体传递，选择primitive时参数会平铺传入
    -->
  <!ELEMENT insert (#PCDATA | selectKey | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST insert
    id CDATA #REQUIRED
    remark CDATA #IMPLIED
    paramType (object|primitive) #IMPLIED
    timeout CDATA #IMPLIED
    flushCache (true|false) #IMPLIED
    statementType (STATEMENT|PREPARED|CALLABLE) #IMPLIED
    keyProperty CDATA #IMPLIED
    useGeneratedKeys (true|false) #IMPLIED
    keyColumn CDATA #IMPLIED
    >

  <!--
    parameterMap 已被官方废弃
    parameterType 本插件也支持，统一使用内联参数映射
    paramType 插件新增类型，选择object时参数将以实体传递，选择primitive时参数会平铺传入
    -->
  <!ELEMENT update (#PCDATA | selectKey | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST update
    id CDATA #REQUIRED
    remark CDATA #IMPLIED
    paramType (object|primitive) #IMPLIED
    timeout CDATA #IMPLIED
    flushCache (true|false) #IMPLIED
    statementType (STATEMENT|PREPARED|CALLABLE) #IMPLIED
    keyProperty CDATA #IMPLIED
    useGeneratedKeys (true|false) #IMPLIED
    keyColumn CDATA #IMPLIED
    >

  <!ELEMENT delete (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST delete
    id CDATA #REQUIRED
    remark CDATA #IMPLIED
    paramType (object|primitive) #IMPLIED
    timeout CDATA #IMPLIED
    flushCache (true|false) #IMPLIED
    statementType (STATEMENT|PREPARED|CALLABLE) #IMPLIED
    >

  <!ELEMENT property EMPTY>
  <!ATTLIST property
    name CDATA #REQUIRED
    value CDATA #REQUIRED
    >

  <!ELEMENT selectKey (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST selectKey
    resultType CDATA #IMPLIED
    keyProperty CDATA #IMPLIED
    keyColumn CDATA #IMPLIED
    order (BEFORE|AFTER) #IMPLIED
    >

  <!ELEMENT collection (id*,result*,association*,collection*)>
  <!ATTLIST collection
    property CDATA #REQUIRED
    column CDATA #IMPLIED
    javaType CDATA #IMPLIED
    ofType CDATA #IMPLIED
    jdbcType CDATA #IMPLIED
    resultMap CDATA #IMPLIED
    remark CDATA #IMPLIED
    >

  <!ELEMENT association (id*,result*,association*,collection*)>
  <!ATTLIST association
    property CDATA #REQUIRED
    column CDATA #IMPLIED
    javaType CDATA #IMPLIED
    jdbcType CDATA #IMPLIED
    select CDATA #IMPLIED
    resultMap CDATA #IMPLIED
    remark CDATA #IMPLIED
    >

  <!--
   自定义sql被mapper.xml共用
   id         sql id唯一
   remark     注释
   -->
  <!ELEMENT sql (#PCDATA | where | if | include | trim | set | foreach | choose | if | bind)*>
  <!ATTLIST sql
    id CDATA #REQUIRED
    remark CDATA #IMPLIED
    >

  <!-- - - - - - - - - - - - - - - - - - - - - - - - -
                   DYNAMIC ELEMENTS
    - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!ELEMENT include (property+)?>
  <!ATTLIST include
    refid CDATA #REQUIRED
    >

  <!ELEMENT bind EMPTY>
  <!ATTLIST bind
    name CDATA #REQUIRED
    value CDATA #REQUIRED
    >

  <!ELEMENT trim (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST trim
    prefix CDATA #IMPLIED
    prefixOverrides CDATA #IMPLIED
    suffix CDATA #IMPLIED
    suffixOverrides CDATA #IMPLIED
    >
  <!ELEMENT where (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>
  <!ELEMENT set (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>

  <!ELEMENT foreach (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST foreach
    collection CDATA #REQUIRED
    item CDATA #IMPLIED
    index CDATA #IMPLIED
    open CDATA #IMPLIED
    close CDATA #IMPLIED
    separator CDATA #IMPLIED
    >

  <!ELEMENT choose (when* , otherwise?)>
  <!ELEMENT when (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST when
    test CDATA #REQUIRED
    >
  <!ELEMENT otherwise (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>

  <!ELEMENT if (#PCDATA | include | trim | where | set | foreach | choose | if | bind)*>
  <!ATTLIST if
    test CDATA #REQUIRED
    >

